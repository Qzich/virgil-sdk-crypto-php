<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('virgil_php')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_virgil_php.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('virgil_php.so')) return;
    } else {
      if (!dl('virgil_php.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class virgil_php {
	const VirgilUniqueTicketType_None = 0;

	const VirgilUniqueTicketType_Email = VirgilUniqueTicketType_Email;

	const VirgilUniqueTicketType_Phone = VirgilUniqueTicketType_Phone;

	const VirgilUniqueTicketType_Fax = VirgilUniqueTicketType_Fax;

	const VirgilUniqueTicketType_Domain = VirgilUniqueTicketType_Domain;

	const VirgilUniqueTicketType_MacAddress = VirgilUniqueTicketType_MacAddress;

	const VirgilUniqueTicketType_Application = VirgilUniqueTicketType_Application;

	static function virgil_unique_ticket_type_to_string($type) {
		return virgil_unique_ticket_type_to_string($type);
	}

	static function virgil_unique_ticket_type_from_string($type) {
		return virgil_unique_ticket_type_from_string($type);
	}

	const VirgilInfoTicketType_None = 0;

	const VirgilInfoTicketType_FirstName = VirgilInfoTicketType_FirstName;

	const VirgilInfoTicketType_LastName = VirgilInfoTicketType_LastName;

	const VirgilInfoTicketType_MiddleName = VirgilInfoTicketType_MiddleName;

	const VirgilInfoTicketType_Nickname = VirgilInfoTicketType_Nickname;

	const VirgilInfoTicketType_BirthDate = VirgilInfoTicketType_BirthDate;

	static function virgil_info_ticket_type_to_string($type) {
		return virgil_info_ticket_type_to_string($type);
	}

	static function virgil_info_ticket_type_from_string($type) {
		return virgil_info_ticket_type_from_string($type);
	}
}

/* PHP Proxy Classes */
class VirgilException {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($what) {
		if (is_resource($what) && get_resource_type($what) === '_p_virgil__VirgilException') {
			$this->_cPtr=$what;
			return;
		}
		$this->_cPtr=new_VirgilException($what);
	}
}

class VirgilVersion {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	static function asNumber() {
		return VirgilVersion_asNumber();
	}

	static function asString() {
		return VirgilVersion_asString();
	}

	static function majorVersion() {
		return VirgilVersion_majorVersion();
	}

	static function minorVersion() {
		return VirgilVersion_minorVersion();
	}

	static function patchVersion() {
		return VirgilVersion_patchVersion();
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_virgil__VirgilVersion') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_VirgilVersion();
	}
}

abstract class VirgilAsn1Compatible {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function toAsn1() {
		return VirgilAsn1Compatible_toAsn1($this->_cPtr);
	}

	function fromAsn1($asn1) {
		VirgilAsn1Compatible_fromAsn1($this->_cPtr,$asn1);
	}
}

class VirgilCryptoException extends VirgilException {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilException::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilException::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilException::__isset($var);
	}

	function __construct($what) {
		if (is_resource($what) && get_resource_type($what) === '_p_virgil__crypto__VirgilCryptoException') {
			$this->_cPtr=$what;
			return;
		}
		$this->_cPtr=new_VirgilCryptoException($what);
	}
}

class VirgilHash extends VirgilAsn1Compatible {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilAsn1Compatible::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilAsn1Compatible::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilAsn1Compatible::__isset($var);
	}

	static function md5() {
		$r=VirgilHash_md5();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new VirgilHash($r);
		}
		return $r;
	}

	static function sha256() {
		$r=VirgilHash_sha256();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new VirgilHash($r);
		}
		return $r;
	}

	static function sha384() {
		$r=VirgilHash_sha384();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new VirgilHash($r);
		}
		return $r;
	}

	static function sha512() {
		$r=VirgilHash_sha512();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new VirgilHash($r);
		}
		return $r;
	}

	static function withName($name) {
		$r=VirgilHash_withName($name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new VirgilHash($r);
		}
		return $r;
	}

	function name() {
		return VirgilHash_name($this->_cPtr);
	}

	function hash($bytes) {
		return VirgilHash_hash($this->_cPtr,$bytes);
	}

	function start() {
		VirgilHash_start($this->_cPtr);
	}

	function update($bytes) {
		VirgilHash_update($this->_cPtr,$bytes);
	}

	function finish() {
		return VirgilHash_finish($this->_cPtr);
	}

	function hmac($key,$bytes) {
		return VirgilHash_hmac($this->_cPtr,$key,$bytes);
	}

	function hmacStart($key) {
		VirgilHash_hmacStart($this->_cPtr,$key);
	}

	function hmacReset() {
		VirgilHash_hmacReset($this->_cPtr);
	}

	function hmacUpdate($bytes) {
		VirgilHash_hmacUpdate($this->_cPtr,$bytes);
	}

	function hmacFinish() {
		return VirgilHash_hmacFinish($this->_cPtr);
	}

	function __construct($other=null) {
		if (is_resource($other) && get_resource_type($other) === '_p_virgil__crypto__VirgilHash') {
			$this->_cPtr=$other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilHash(); break;
		default: $this->_cPtr=new_VirgilHash($other);
		}
	}
}

class VirgilBase64 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	static function encode($data) {
		return VirgilBase64_encode($data);
	}

	static function decode($base64str) {
		return VirgilBase64_decode($base64str);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_virgil__crypto__VirgilBase64') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_VirgilBase64();
	}
}

class VirgilCustomParams extends VirgilAsn1Compatible {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilAsn1Compatible::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilAsn1Compatible::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilAsn1Compatible::__isset($var);
	}

	function isEmpty() {
		return VirgilCustomParams_isEmpty($this->_cPtr);
	}

	function setInteger($key,$value) {
		VirgilCustomParams_setInteger($this->_cPtr,$key,$value);
	}

	function getInteger($key) {
		return VirgilCustomParams_getInteger($this->_cPtr,$key);
	}

	function removeInteger($key) {
		VirgilCustomParams_removeInteger($this->_cPtr,$key);
	}

	function setString($key,$value) {
		VirgilCustomParams_setString($this->_cPtr,$key,$value);
	}

	function getString($key) {
		return VirgilCustomParams_getString($this->_cPtr,$key);
	}

	function removeString($key) {
		VirgilCustomParams_removeString($this->_cPtr,$key);
	}

	function setData($key,$value) {
		VirgilCustomParams_setData($this->_cPtr,$key,$value);
	}

	function getData($key) {
		return VirgilCustomParams_getData($this->_cPtr,$key);
	}

	function removeData($key) {
		VirgilCustomParams_removeData($this->_cPtr,$key);
	}

	function clear() {
		VirgilCustomParams_clear($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_virgil__crypto__VirgilCustomParams') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_VirgilCustomParams();
	}
}

abstract class VirgilJsonCompatible extends VirgilAsn1Compatible {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilAsn1Compatible::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilAsn1Compatible::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilAsn1Compatible::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function toJson() {
		return VirgilJsonCompatible_toJson($this->_cPtr);
	}

	function fromJson($json) {
		VirgilJsonCompatible_fromJson($this->_cPtr,$json);
	}
}

class VirgilKeyPair {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function publicKey() {
		return VirgilKeyPair_publicKey($this->_cPtr);
	}

	function privateKey() {
		return VirgilKeyPair_privateKey($this->_cPtr);
	}

	function __construct($pwd_or_publicKey_or_other=null,$privateKey=null) {
		if (is_resource($pwd_or_publicKey_or_other) && get_resource_type($pwd_or_publicKey_or_other) === '_p_virgil__service__data__VirgilKeyPair') {
			$this->_cPtr=$pwd_or_publicKey_or_other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilKeyPair(); break;
		case 1: $this->_cPtr=new_VirgilKeyPair($pwd_or_publicKey_or_other); break;
		default: $this->_cPtr=new_VirgilKeyPair($pwd_or_publicKey_or_other,$privateKey);
		}
	}
}

abstract class VirgilId extends VirgilJsonCompatible {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilJsonCompatible::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilJsonCompatible::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilJsonCompatible::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function isEmpty() {
		return VirgilId_isEmpty($this->_cPtr);
	}

	function clear() {
		VirgilId_clear($this->_cPtr);
	}
}

class VirgilAccountId extends VirgilId {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilId::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilId::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilId::__isset($var);
	}

	function accountId() {
		return VirgilAccountId_accountId($this->_cPtr);
	}

	function setAccountId($accountId) {
		VirgilAccountId_setAccountId($this->_cPtr,$accountId);
	}

	function isEmpty() {
		return VirgilAccountId_isEmpty($this->_cPtr);
	}

	function clear() {
		VirgilAccountId_clear($this->_cPtr);
	}

	function __construct($other=null) {
		if (is_resource($other) && get_resource_type($other) === '_p_virgil__service__data__VirgilAccountId') {
			$this->_cPtr=$other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilAccountId(); break;
		default: $this->_cPtr=new_VirgilAccountId($other);
		}
	}
}

class VirgilCertificateId extends VirgilAccountId {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilAccountId::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilAccountId::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilAccountId::__isset($var);
	}

	function certificateId() {
		return VirgilCertificateId_certificateId($this->_cPtr);
	}

	function setCertificateId($certificateId) {
		VirgilCertificateId_setCertificateId($this->_cPtr,$certificateId);
	}

	function isEmpty() {
		return VirgilCertificateId_isEmpty($this->_cPtr);
	}

	function clear() {
		VirgilCertificateId_clear($this->_cPtr);
	}

	function __construct($other=null) {
		if (is_resource($other) && get_resource_type($other) === '_p_virgil__service__data__VirgilCertificateId') {
			$this->_cPtr=$other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilCertificateId(); break;
		default: $this->_cPtr=new_VirgilCertificateId($other);
		}
	}
}

class VirgilTicketId extends VirgilCertificateId {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilCertificateId::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilCertificateId::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilCertificateId::__isset($var);
	}

	function ticketId() {
		return VirgilTicketId_ticketId($this->_cPtr);
	}

	function setTicketId($ticketId) {
		VirgilTicketId_setTicketId($this->_cPtr,$ticketId);
	}

	function isEmpty() {
		return VirgilTicketId_isEmpty($this->_cPtr);
	}

	function clear() {
		VirgilTicketId_clear($this->_cPtr);
	}

	function __construct($other=null) {
		if (is_resource($other) && get_resource_type($other) === '_p_virgil__service__data__VirgilTicketId') {
			$this->_cPtr=$other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilTicketId(); break;
		default: $this->_cPtr=new_VirgilTicketId($other);
		}
	}
}

class VirgilSignId extends VirgilTicketId {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilTicketId::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilTicketId::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilTicketId::__isset($var);
	}

	function signId() {
		return VirgilSignId_signId($this->_cPtr);
	}

	function setSignId($signId) {
		VirgilSignId_setSignId($this->_cPtr,$signId);
	}

	function isEmpty() {
		return VirgilSignId_isEmpty($this->_cPtr);
	}

	function clear() {
		VirgilSignId_clear($this->_cPtr);
	}

	function __construct($other=null) {
		if (is_resource($other) && get_resource_type($other) === '_p_virgil__service__data__VirgilSignId') {
			$this->_cPtr=$other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilSignId(); break;
		default: $this->_cPtr=new_VirgilSignId($other);
		}
	}
}

abstract class VirgilAccountIdProvider extends VirgilJsonCompatible {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilJsonCompatible::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilJsonCompatible::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilJsonCompatible::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function id() {
		$r=VirgilAccountIdProvider_id($this->_cPtr);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_virgil__service__data__VirgilAccountId': return new VirgilAccountId($r);
		default: return new VirgilAccountId($r);
		}
	}

	function setId($id) {
		VirgilAccountIdProvider_setId($this->_cPtr,$id);
	}
}

abstract class VirgilCertificateIdProvider extends VirgilJsonCompatible {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilJsonCompatible::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilJsonCompatible::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilJsonCompatible::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function id() {
		$r=VirgilCertificateIdProvider_id($this->_cPtr);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_virgil__service__data__VirgilCertificateId': return new VirgilCertificateId($r);
		default: return new VirgilCertificateId($r);
		}
	}

	function setId($id) {
		VirgilCertificateIdProvider_setId($this->_cPtr,$id);
	}
}

abstract class VirgilTicketIdProvider extends VirgilJsonCompatible {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilJsonCompatible::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilJsonCompatible::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilJsonCompatible::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function id() {
		$r=VirgilTicketIdProvider_id($this->_cPtr);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_virgil__service__data__VirgilTicketId': return new VirgilTicketId($r);
		default: return new VirgilTicketId($r);
		}
	}

	function setId($id) {
		VirgilTicketIdProvider_setId($this->_cPtr,$id);
	}
}

abstract class VirgilSignIdProvider extends VirgilJsonCompatible {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilJsonCompatible::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilJsonCompatible::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilJsonCompatible::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function id() {
		$r=VirgilSignIdProvider_id($this->_cPtr);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_virgil__service__data__VirgilSignId': return new VirgilSignId($r);
		default: return new VirgilSignId($r);
		}
	}

	function setId($id) {
		VirgilSignIdProvider_setId($this->_cPtr,$id);
	}
}

class VirgilAccount extends VirgilAccountIdProvider {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilAccountIdProvider::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilAccountIdProvider::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilAccountIdProvider::__isset($var);
	}

	function __construct($other=null) {
		if (is_resource($other) && get_resource_type($other) === '_p_virgil__service__data__VirgilAccount') {
			$this->_cPtr=$other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilAccount(); break;
		default: $this->_cPtr=new_VirgilAccount($other);
		}
	}
}

class VirgilCertificate extends VirgilCertificateIdProvider {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilCertificateIdProvider::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilCertificateIdProvider::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilCertificateIdProvider::__isset($var);
	}

	function publicKey() {
		return VirgilCertificate_publicKey($this->_cPtr);
	}

	function __construct($publicKey_or_other=null) {
		if (is_resource($publicKey_or_other) && get_resource_type($publicKey_or_other) === '_p_virgil__service__data__VirgilCertificate') {
			$this->_cPtr=$publicKey_or_other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilCertificate(); break;
		default: $this->_cPtr=new_VirgilCertificate($publicKey_or_other);
		}
	}
}

abstract class VirgilTicket extends VirgilTicketIdProvider {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilTicketIdProvider::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilTicketIdProvider::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilTicketIdProvider::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	static function createFromAsn1($asn1) {
		$r=VirgilTicket_createFromAsn1($asn1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new VirgilTicket($r);
		}
		return $r;
	}

	static function createFromJson($json) {
		$r=VirgilTicket_createFromJson($json);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new VirgilTicket($r);
		}
		return $r;
	}

	function isUniqueTicket() {
		return VirgilTicket_isUniqueTicket($this->_cPtr);
	}

	function asUniqueTicket() {
		$r=VirgilTicket_asUniqueTicket($this->_cPtr);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_virgil__service__data__VirgilUniqueTicket': return new VirgilUniqueTicket($r);
		default: return new VirgilUniqueTicket($r);
		}
	}

	function isInfoTicket() {
		return VirgilTicket_isInfoTicket($this->_cPtr);
	}

	function asInfoTicket() {
		$r=VirgilTicket_asInfoTicket($this->_cPtr);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_virgil__service__data__VirgilInfoTicket': return new VirgilInfoTicket($r);
		default: return new VirgilInfoTicket($r);
		}
	}
}

class VirgilUniqueTicket extends VirgilTicket {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilTicket::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilTicket::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilTicket::__isset($var);
	}

	static function ClassName() {
		return VirgilUniqueTicket_ClassName();
	}

	function isUniqueTicket() {
		return VirgilUniqueTicket_isUniqueTicket($this->_cPtr);
	}

	function value() {
		return VirgilUniqueTicket_value($this->_cPtr);
	}

	function type() {
		return VirgilUniqueTicket_type($this->_cPtr);
	}

	function __construct($type_or_other=null,$value=null) {
		if (is_resource($type_or_other) && get_resource_type($type_or_other) === '_p_virgil__service__data__VirgilUniqueTicket') {
			$this->_cPtr=$type_or_other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilUniqueTicket(); break;
		case 1: $this->_cPtr=new_VirgilUniqueTicket($type_or_other); break;
		default: $this->_cPtr=new_VirgilUniqueTicket($type_or_other,$value);
		}
	}
}

class VirgilInfoTicket extends VirgilTicket {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilTicket::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilTicket::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilTicket::__isset($var);
	}

	static function ClassName() {
		return VirgilInfoTicket_ClassName();
	}

	function isInfoTicket() {
		return VirgilInfoTicket_isInfoTicket($this->_cPtr);
	}

	function value() {
		return VirgilInfoTicket_value($this->_cPtr);
	}

	function type() {
		return VirgilInfoTicket_type($this->_cPtr);
	}

	function __construct($type_or_other=null,$value=null) {
		if (is_resource($type_or_other) && get_resource_type($type_or_other) === '_p_virgil__service__data__VirgilInfoTicket') {
			$this->_cPtr=$type_or_other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilInfoTicket(); break;
		case 1: $this->_cPtr=new_VirgilInfoTicket($type_or_other); break;
		default: $this->_cPtr=new_VirgilInfoTicket($type_or_other,$value);
		}
	}
}

class VirgilSign extends VirgilSignIdProvider {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilSignIdProvider::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilSignIdProvider::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilSignIdProvider::__isset($var);
	}

	function hashName() {
		return VirgilSign_hashName($this->_cPtr);
	}

	function signedDigest() {
		return VirgilSign_signedDigest($this->_cPtr);
	}

	function signerCertificateId() {
		return VirgilSign_signerCertificateId($this->_cPtr);
	}

	function __construct($hashName_or_other=null,$signedDigest=null,$signerCertificateId=null) {
		if (is_resource($hashName_or_other) && get_resource_type($hashName_or_other) === '_p_virgil__service__data__VirgilSign') {
			$this->_cPtr=$hashName_or_other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilSign(); break;
		case 1: $this->_cPtr=new_VirgilSign($hashName_or_other); break;
		case 2: $this->_cPtr=new_VirgilSign($hashName_or_other,$signedDigest); break;
		default: $this->_cPtr=new_VirgilSign($hashName_or_other,$signedDigest,$signerCertificateId);
		}
	}
}

class VirgilCipherBase {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_virgil__service__VirgilCipherBase') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_VirgilCipherBase();
	}

	function addKeyRecipient($certificateId,$publicKey) {
		VirgilCipherBase_addKeyRecipient($this->_cPtr,$certificateId,$publicKey);
	}

	function removeKeyRecipient($certificateId) {
		VirgilCipherBase_removeKeyRecipient($this->_cPtr,$certificateId);
	}

	function addPasswordRecipient($pwd) {
		VirgilCipherBase_addPasswordRecipient($this->_cPtr,$pwd);
	}

	function removePasswordRecipient($pwd) {
		VirgilCipherBase_removePasswordRecipient($this->_cPtr,$pwd);
	}

	function removeAllRecipients() {
		VirgilCipherBase_removeAllRecipients($this->_cPtr);
	}

	function getContentInfo() {
		return VirgilCipherBase_getContentInfo($this->_cPtr);
	}

	function setContentInfo($contentInfo) {
		VirgilCipherBase_setContentInfo($this->_cPtr,$contentInfo);
	}

	function customParams() {
		$r=VirgilCipherBase_customParams($this->_cPtr);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_virgil__crypto__VirgilCustomParams': return new VirgilCustomParams($r);
		default: return new VirgilCustomParams($r);
		}
	}
}

class VirgilCipher extends VirgilCipherBase {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilCipherBase::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilCipherBase::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilCipherBase::__isset($var);
	}

	function encrypt($data,$embedContentInfo=false) {
		return VirgilCipher_encrypt($this->_cPtr,$data,$embedContentInfo);
	}

	function decryptWithKey($encryptedData,$certificateId,$privateKey,$privateKeyPassword=null) {
		switch (func_num_args()) {
		case 3: $r=VirgilCipher_decryptWithKey($this->_cPtr,$encryptedData,$certificateId,$privateKey); break;
		default: $r=VirgilCipher_decryptWithKey($this->_cPtr,$encryptedData,$certificateId,$privateKey,$privateKeyPassword);
		}
		return $r;
	}

	function decryptWithPassword($encryptedData,$pwd) {
		return VirgilCipher_decryptWithPassword($this->_cPtr,$encryptedData,$pwd);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_virgil__service__VirgilCipher') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_VirgilCipher();
	}
}

class VirgilChunkCipher extends VirgilCipherBase {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilCipherBase::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilCipherBase::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilCipherBase::__isset($var);
	}

	const kPreferredChunkSize = VirgilChunkCipher_kPreferredChunkSize;

	function startEncryption($preferredChunkSize=null) {
		switch (func_num_args()) {
		case 0: $r=VirgilChunkCipher_startEncryption($this->_cPtr); break;
		default: $r=VirgilChunkCipher_startEncryption($this->_cPtr,$preferredChunkSize);
		}
		return $r;
	}

	function startDecryptionWithKey($certificateId,$privateKey,$privateKeyPassword=null) {
		switch (func_num_args()) {
		case 2: $r=VirgilChunkCipher_startDecryptionWithKey($this->_cPtr,$certificateId,$privateKey); break;
		default: $r=VirgilChunkCipher_startDecryptionWithKey($this->_cPtr,$certificateId,$privateKey,$privateKeyPassword);
		}
		return $r;
	}

	function startDecryptionWithPassword($pwd) {
		return VirgilChunkCipher_startDecryptionWithPassword($this->_cPtr,$pwd);
	}

	function process($data) {
		return VirgilChunkCipher_process($this->_cPtr,$data);
	}

	function finish() {
		VirgilChunkCipher_finish($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_virgil__service__VirgilChunkCipher') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_VirgilChunkCipher();
	}
}

class VirgilSigner {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($hash=null) {
		if (is_resource($hash) && get_resource_type($hash) === '_p_virgil__service__VirgilSigner') {
			$this->_cPtr=$hash;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilSigner(); break;
		default: $this->_cPtr=new_VirgilSigner($hash);
		}
	}

	function sign($data_or_asn1Object,$signerCertificateId,$privateKey,$privateKeyPassword=null) {
		switch (func_num_args()) {
		case 3: $r=VirgilSigner_sign($this->_cPtr,$data_or_asn1Object,$signerCertificateId,$privateKey); break;
		default: $r=VirgilSigner_sign($this->_cPtr,$data_or_asn1Object,$signerCertificateId,$privateKey,$privateKeyPassword);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new VirgilSign($r);
		}
		return $r;
	}

	function verify($data_or_asn1Object,$sign,$publicKey) {
		return VirgilSigner_verify($this->_cPtr,$data_or_asn1Object,$sign,$publicKey);
	}
}

abstract class VirgilDataSource {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function hasData() {
		return VirgilDataSource_hasData($this->_cPtr);
	}

	function read() {
		return VirgilDataSource_read($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_virgil__service__VirgilDataSource') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'VirgilDataSource') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_VirgilDataSource($_this);
	}
}

abstract class VirgilDataSink {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function isGood() {
		return VirgilDataSink_isGood($this->_cPtr);
	}

	function write($data) {
		VirgilDataSink_write($this->_cPtr,$data);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_virgil__service__VirgilDataSink') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'VirgilDataSink') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_VirgilDataSink($_this);
	}
}

class VirgilStreamSigner {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($hash=null) {
		if (is_resource($hash) && get_resource_type($hash) === '_p_virgil__service__VirgilStreamSigner') {
			$this->_cPtr=$hash;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_VirgilStreamSigner(); break;
		default: $this->_cPtr=new_VirgilStreamSigner($hash);
		}
	}

	function sign($source,$signerCertificateId,$privateKey,$privateKeyPassword=null) {
		switch (func_num_args()) {
		case 3: $r=VirgilStreamSigner_sign($this->_cPtr,$source,$signerCertificateId,$privateKey); break;
		default: $r=VirgilStreamSigner_sign($this->_cPtr,$source,$signerCertificateId,$privateKey,$privateKeyPassword);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new VirgilSign($r);
		}
		return $r;
	}

	function verify($source,$sign,$publicKey) {
		return VirgilStreamSigner_verify($this->_cPtr,$source,$sign,$publicKey);
	}
}

class VirgilStreamCipher extends VirgilCipherBase {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virgil_php_alter_newobject($this->_cPtr,$value);
		VirgilCipherBase::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virgil_php_get_newobject($this->_cPtr);
		return VirgilCipherBase::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return VirgilCipherBase::__isset($var);
	}

	function encrypt($source,$sink,$embedContentInfo=false) {
		VirgilStreamCipher_encrypt($this->_cPtr,$source,$sink,$embedContentInfo);
	}

	function decryptWithKey($source,$sink,$certificateId,$privateKey,$privateKeyPassword=null) {
		switch (func_num_args()) {
		case 4: VirgilStreamCipher_decryptWithKey($this->_cPtr,$source,$sink,$certificateId,$privateKey); break;
		default: VirgilStreamCipher_decryptWithKey($this->_cPtr,$source,$sink,$certificateId,$privateKey,$privateKeyPassword);
		}
	}

	function decryptWithPassword($source,$sink,$pwd) {
		VirgilStreamCipher_decryptWithPassword($this->_cPtr,$source,$sink,$pwd);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_virgil__service__VirgilStreamCipher') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_VirgilStreamCipher();
	}
}


?>
